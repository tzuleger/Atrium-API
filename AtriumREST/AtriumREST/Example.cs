using System;
using System.Linq;
using System.Collections.Generic;
using System.IO;

using ThreeRiversTech.Zuleger.Atrium.REST.Objects;
using ThreeRiversTech.Zuleger.Atrium.REST.Security;

namespace ThreeRiversTech.Zuleger.Atrium.REST.Example
{
    /// <summary>
    /// In-depth example on how to use the Atrium API.
    /// </summary>
    class Example
    {
        private static Random r = new Random();
        private static int increment = 100;

        const int access_level_door_1_only = 0;
        const int access_level_area_a = 9;
        const int access_level_warehouse = 16;

        public static void Main(String[] args)
        {
            AtriumController.Timeout = 20;
            String username = "admin";
            String password = "admin";
            String address = "http://69.70.57.94/";
            if(args.Length > 0)
            {
                for(int i = 0; i < args.Length; ++i)
                {
                    var arg = args[i];
                    if(arg == "-u")
                    {
                        username = args[++i];
                    }
                    else if(arg == "-p")
                    {
                        password = args[++i];
                    }
                    else if(arg == "-a")
                    {
                        address = args[++i];
                    }
                    else if(arg == "-hrg")
                    {
                        username = "admin";
                        password = "Holmen2019";
                        address = "http://192.168.1.218:2000/";
                        break;
                    }
                    else if(arg == "-pub")
                    {
                        username = "admin";
                        password = "admin";
                        address = "http://69.70.57.94/";
                        break;
                    }
                    else if(arg == "-inc")
                    {
                        increment = Int32.Parse(args[++i]);
                    }
                }
            }
            AtriumController cnn = null;
            Console.WriteLine($"Connecting to {address} as \"{username}\" with password \"{password}\"");
            cnn = new AtriumController(username, password, address);
            Console.WriteLine($"Successfully connected. Device Info: {cnn.ProductName}, {cnn.ProductLabel} (v{cnn.ProductVersion}) - SN: {cnn.SerialNumber}");
            Console.WriteLine($"Credentials - SID: {cnn.SessionID}, Key: {cnn.SessionKey}");
            try
            {
                String key = "AF4A6A52D06DFC0F6B4BC9A20CC20470";
                String ct = "AFF0046E8942406225FECEEF0DA4B7235C9D2CC4D6FAF4F0F6C6686CDA44E009F6683E5D92EDBFB61814750236BF322B23673660C469BF9AA06B4678EE39630D46F783C8FFBEFD8BD032FFCC2CB9ABCC13C1CB6AA1DF6CFF2346AED4720DCFA15F1E97D6840D8346E5C65168AC037C887557B4DF243A906EBB775F5D1AF9F4BA2B5114083446EFE1BAEFF8FAF6DBE02FBDBBF615E95D4D2AA44C354728B5767FA8026C7DC9D1EFC4657309197E8870E65268F3000F792456A8D68EBFF119E4E6DC8F7ECA689536404E199ED60A0C7C4776981E04BC4E870EE3B3F434BCD3F4D3187141359B038BCC73099D32D13DA88A7C88088E9E116F186C60AFB3CD41A69C4B023824FD7221B7A5B2306BFD4FACC937DF469D29838C150FA1F6062E3159159E42E14540C4F46BE6AD655B706986B8FB33F2BB0A55E862071A14B3E8FF6B23FC7AD9BFE250635EEE8479B7ADA78D693F4A49918FDF19AC2E21ED9F062204765450B208B33719184A67077DBC74405212DBE993765E4C448F7D91C5A5E231196F82623036EB9386F18070A7BC99700AA9D8628F0F1F77C9B9C4BB22E8EF60A7E9068DB3364137FEAEF8205B6578139D70C3924B53CA60D92D1539F072EEC83388B9C4DA7E3C397C648195B1A1A427F7BF73535F38B9A728441E37AD2896D505549F301E81171B56205B0AEE5E9E77E1ED99C1EDF6291C5C15E5A3940EE166F67C40B982ED77A2B2D47C79EE815B154177AEE44C348A8F48685E70BDB841B7F88142734465FD126AC1F4C860956B0B12DE80179898DB31FD37300E3A8C6FBC0BB61F1281247A298AD8CC23DA93E15C631F85D3CADEB048BC74C2947170EA634515B808ECDE542BF3727D34BD3FD320D1706D6F98DD0BCF43C832033CC190D3BB743C75A440C0ACAA46548D7DF3B623E5416F9E9DB1A2487BBBE2D40B67821AE3E3F020419F780BCDDD86A0B5186BD79FFE9CAAF2EC800F36762B8E21262088CDA530E1CE307BDF7BFF0B2EA8E2561CFF0E1D9091805AC1CA6676DF653C3DCEC69901C858CF1E863C3FD9BC4AD96F4FFD72E78C43888C236BFA856A5CED2446C625D567F1567E39CB869284D2B100D21018FBE08099179080E30EC67988CDAFC99E839E6BDDEEDE65C7ACD97AE52D9329B7DC628253CBC1C1EC8374D9D988FF9EBCFD7D98221E405DF757C5B5F73CBD9F399B007AE17F6F73BDB996C2C0732EBE42F85C7554E1EB0B6D5DDDD99D7E67036FB5511E6FF92110FE28AE72F02D18A3220EC099C76F9B1D0400A58229E729D27832E437AFED37886EE4A575C740A7F205C0E08DF01688703516A9F157238ADBA186819852C613B3810F1DF71B742604B2478855A5B10F64E68F31B7427871F6B3DADA7412443C0068D61EEF3E7EC4532D7E66FCD1FF23E49B0558A4A1314C81B482F22F625242FF822C6F5B8CCDA7B7C703BF7977BF1B176AA584A7FFA72D1C7193E1AF572C95658295A36688227D66CBA1769CF3ECE474FF49A2BDD2CEB47CBBDE588E65A1ADDE16B3A1154C7E8C9EB2C2C854C0F5D44835B6BA214EDBB68B692461CC9876A50142BAC7B45ED317B5C2BE906C980EBD5C0F0BF0A3A36095695B3C84E58C4053B9D9060AA1E76F1E4AADD5F898A1B2183B171AEC593576728686002D7BD0AE4D5002AE90543FE8CCAF1DA17D159A828F2F230083236B5C289EA481587C2DD57F9F396729312B7C172F4BC847B5202E3B2F0BBEAFFFC47E34EBDF3FE8558374097E5BEF2E09505B89E4AF84A0AB042C3528F9798D20C3469B4D9CD16767F9BD4377325ED0A4D7B13A090AF5FDBEC0A62DF8D7E64AD1927C8BBFF00EBC9367084D208599DA4BF1568AF0DC5DA6ED95E92645735DB0EF0A6C1480FAF121836C7754266D6E148EFF8E4B832B2AC88AB829947103E9CA66659FE4EBAAE9E75452361CFEEA66FBCFC168F044A419C8E33F5552897936B34F2785CA5FDEA2E65CAC43815394B409AB179F926B3A8B56EC7B6AE090AFA018893A6EE4FDC360FCCCCB58041BF5E9EB588BD4966441E0EFE4F7D742D74273B5660C948804D7FD8608CE6016CE79CBF93F740E077AFBD006D3756E82AD9BA9AEFCF1D570C815844FC496A5F94B10698066F9D5BFEB3F42A15FB1F9961B10B2C48A1D1F3A2193BA4326E9017576A444ECFDCAD6F101A6A0F0A4981F2293AFE2D3427ABA66F972781E36CBDD039487A283C3D25FA21EE718BA6321D596FE7C90A6D4F27DD12E1B6E681ABC3A1D50040E3F6EEED85368EE233299ADBB3BAEE1B92B297A05DED61AC7961FC8AC82954EC62904BC82B1A43DC26817418A36770F92DE1CB852D9000E22CAC772AF9812D0CDEC0F6C0C6D16B69ED6FE1A2E2BF41525662BC2F8C1BB5903BDB9D3390E377668EBDCBA64D4B3122B492C5B2654606E8B4A4C8EBC930604B9F0A415B1FC79D461C6589049F2C81D440B135AD06C593F0EA5E01BE788E537BB88B86483D104567B08D272AD0E9C566069E54C5FB15A9291E063DDCDDF09931C31812E80E1FCB1A97AE07C130A193F271CFF711AACC273948326426C3C06CBD78F1CC325AC9296A1F6FBE6D900382B0339B353DB6C265CA231A56EDD15504F63AB5CFB7763E495709BEA26046E76E9AD78C982B2E0D4D75BB9E6B70187C414F444C775DE5B011701F344822B1E2CF72268A533687E7054D93493766FDFA13B642C59D9A1978A9080800480EA4B42359B8CE3A6D6157550127D46E896BC00AC34BD3A455BDE717A88A65E265BB38D7AF27FF0F455E42CA5924C4060F4B5D241B52529AE3959BF20C9EE58E64E213B8CB2FD2D357515ED8810612C84345DD72B3BF1D49E1B9FA118DCA8763942A3F21E032B1105E5C6DDBE9281FF314EFB7EBC487F81803C586DE36E4061236F05F2C70F7A575CF2FBFF7AAA32EE4ED5C3FCF60977563906B7F2FEC21FE44657D5566A887AC5C740B2B9C6F69464AC887E1714ACB7733DC1849526F1EE0C15E259DC6A745C7034BAC5DB9B3680BCB8F0E185E02AD75F9E700ABA6C6048B0A7226224EC225B0717A385F0200E1D98E0E1C5BF95C0211E3AFB3881A31106A0FB8407CD4B5F06B885B57A35CB9E3B3E1CD25FB3B770243EDF62B80B4D999F14A113F15B7910DEB07547EB5B965E999E527B1FB2DA3582A369810EED9F9C8D91D79B2660E21163FBE336E49C3A3B7ADB1E05C28FBEA4F1F9078D03CD7555B8E7C08FC6E3722D6D9583B7847E14B0CC98850B4D564BC9B413EA16C5254D471B76431E288912F1FF15527C8100EB168A86687F520FC49204CEB0A5059058CCB208E1E3C89815BA1E14E30E1534A6D792101154B4CF829CA61E6D4214597BAE549D941BC03675CC32C5C1A704E7BC9C832B39012B30FBFFFF1D4568D2A39628976D993F0AB2C08AEFC9BA257EAAD3BC3DE84C85A897CBD203F1095713EA20AC1640554F7062123EB8F76FE44D2D0DEF8E6969E93FC014C0315AD5A1572945E364D0135BBA1D337D52735D247097CDC3B057EEA40D98A41D6D707B20A85A0961B8C68699D6AE3829E4EF866AEA65CD366AA7B89D2024030B2EED9A4F90EC151BDF7D40B9D562063F408C5A4536F4737826FA0590A6345FFC2E89244E9982D541A960C16A14196AA963168549EA644D6C543CD30DECFC3A7C708914304240EEFE3B58C12CDD822F4BDD34FB6EE73CBED40EDF0F6510C7D2DD26A79894C5770AE9B57E66D0A65D0A51C5800DDEC8386013FCB10EF2707DEC51ABE074493FB759A0B71D698604E76CD46FAA8205D6F1BA381A0774EA0F199C23EFE5093A29816E853DFC97F8770037C6DAA4453E393344F26EB8F3EB56E9C45BF8075C87A2973B6AAE0294B1F1EF5F2FD12FF7A3607EA19FBEA62CABAE5E514D8DA912657827510536D648D993D04790030B9CE65E574296F1AC8D40799182E228864A6FCCA8118047E977E1C2ABCF12E8EE7DF2DA3DE1CEF89D6FFF4925E89DF223290B403E7F823C4A5B9F3AD71FAECE7459CDEEA88281DDF4E0BAF2525B18B9F16AE978206A1E09D001D2546AEFAF4174FAD6471565925201E4879A08A1F619CD8451A1D56E12221812EDC7A5AD654EC4C15C97299D3A1F9F201B89FE779CFDA96AC81F9957923F4D884869BCB43558E2D3F62C0A3FB07E70791DC84A43AD4B4E44CF1AE731EE5A6E38C1E29D2F984F193981AAB2A43D493DAFB25B41C420152BA9553CA788DCA226D8CCB5AFA2B7A6B1DD19244DB5478B1662FD9542146F20F9210CE960D5E5986884FE885C54E09AEC923F395C671CAAF7382F919B92BDDFF40EA358C5AE8A928E3108946BB869F9D002905D1F2AD25382050C642A9EBF117B309712B1D38786807D48B29744D1C8B1211D70D08A528047837834B2925188FD3B22113FB73AAE914FE76AC9C58505378354C8A6CF4679318836DAA16D91BAEACFE7B5B3C20651E381C0E873811396388C085C22E99638D6113C686776CEC73793B40ED77A68BD6305EC9707882E9D1227E60358776F5DC107C6E08DE2362130FACE00D72924291D97E640C08F476EC81A31CDB31FF0978E1F24CF2EC0634D7F8BCC993A013643922826009AEA7D346CD246AFB65357894A0CFB723986D708E47F1052E06BF29B6396C8F2D9C7B733F014E71724BB682F3E370572EB1320974D9F4993D8622A372313DC2527A3E6013B6245C35E06A2C3708D1517BE995AFEF95616C105BABEEB0F27F9CD4FC6BC045819769E596B858F601260483BD2AA3B955A809AABF785B4981EF3BD051D81E678CF70B03155B8F2D6FBB4291C0AA1EDC1368C260AAB2AE2779E8072C1C003E1CD615944673D6752B2FADFA2106904F02B4D5CC18A7E4724B93BC5F618178A6917408CBC7024327D393877C4333E130C8B65122C18DE3757830C689D89C68F545BA7D63515146B3557796A152C54E2241621771D315BB8244C14F16C742E5CC42D7C1DA65569D64B592BC4F71F2C440ED245064D0AD29C233C5E314BABD739448E7A5AEA44F72AA63ED7955A93816541744DE41244B810C81B9033A289CA86A305B890933F2767ED80DAEBF6CCF0538461A40B5C2EA4FF78EE60D212AEEB2D7C5B3C35E426DC3F18AD51ECFB4FE2DF6504B290E08C32199F8C363FFB4F0B761C3B4EB366BE52B48C0F97E2643BE840943F89D4B2BD7F39205766EDC57F22BF8F73FDFA8229C9E418B362E2DB9AB8FBC6813EC5F02FB6F1C8A43C3B69B2C69C4EE5B29B2678749C469ED7BF9B66946F6A7194D153786318B6C61FFE55CF7AB33ABA8C5A299FCB490F67CA83D714F2401E6367D913F24F3AF781F958EC43EF315193ADE70D1196983C7767BC9A494AC7A30F2204D4C77415233E53018EB9D37574A2A6995FA059DCC51A74A86F7608F4BEFA0D229A84D111A61CABFF224C8900A020364C650474678EFB1D0D9958024CFBA110547D587CFB36F52C0D0C5900D72924291D97";
                //Console.WriteLine($"\nCheckSum = {RC4.CheckSum(RC4.Decrypt(key, ct))}");
                Console.WriteLine($"Decrypted:\n{RC4.Decrypt(key, ct)}\n\n");
                //Test(cnn);
                cnn.Close();
            }
            catch(Exception e)
            {
                Console.WriteLine($"Request:\n{cnn.RequestText}\nResponse:\n{cnn.ResponseText}");
                Console.WriteLine($"Encrypted Request:\n{cnn.EncryptedRequest}\nEncrypted Response:\n{cnn.EncryptedResponse}");
                cnn.Close();
                throw e;
            }
        }

        private static void Test(AtriumController cnn)
        {
            List<User> users = cnn.GetAllByIndex<User>(0, increment);
            List<Card> cards = cnn.GetAllByIndex<Card>(0, increment);
            User u = new User
            {
                FirstName = "JANE",
                LastName = "DOE",
                ActivationDate = DateTime.Now,
                ExpirationDate = DateTime.Now.AddYears(3).AddDays(7),
                AccessLevelObjectIds = AtriumController.ACCESS_LEVELS(
                    access_level_door_1_only,
                    access_level_area_a,
                    access_level_warehouse)
            };
            Card c = new Card
            {
                DisplayName = "JANE DOE CARD",
                CardNumberLo = AtriumController.To26BitCardNumber(r.Next(0, 100), r.Next(0, 8000)),
                ActivationDate = DateTime.Now,
                ExpirationDate = DateTime.Now.AddYears(3).AddDays(7),
            };

            Func<User, bool> userPred = (user => user.FirstName == u.FirstName && user.LastName == u.LastName);
            // Update the card if the FirstName and LastName are equal.
            if (users.Any(userPred))
            {
                User existingUser = users.Where(userPred).First();
                existingUser.ActivationDate = u.ActivationDate;
                existingUser.ExpirationDate = u.ExpirationDate;
                existingUser.AccessLevelObjectIds = u.AccessLevelObjectIds;
                u = existingUser;

                Console.WriteLine($"User exists. Updating {existingUser} (Object ID: {existingUser.ObjectId}, Object GUID: {existingUser.ObjectGuid}).");
                if (cnn.Update(existingUser))
                {
                    Console.WriteLine($"User successfully updated. (Object ID: {existingUser.ObjectId}, Object GUID: {existingUser.ObjectGuid})");
                    c.EntityRelationshipId = existingUser.ObjectId;
                    c.EntityRelationshipGuid = existingUser.ObjectGuid;
                }
                else
                {
                    Console.WriteLine($"User update unsuccessful.\nRequest Text:\n{cnn.RequestText}\nResponse Text:\n{cnn.ResponseText}\n{u.Jsonify()}");
                }
            }
            else
            {
                Console.WriteLine($"User does not exist. Inserting {u}.");
                cnn.Insert(u);
                if (u.ObjectId != null)
                {
                    Console.WriteLine($"User successfully inserted. Object ID: {u.ObjectId}");
                    c.EntityRelationshipId = u.ObjectId;
                    c.EntityRelationshipGuid = u.ObjectGuid;
                }
                else
                {
                    Console.WriteLine($"User insert unsuccessful.\nRequest Text:\n{cnn.RequestText}\nResponse Text:\n{cnn.ResponseText}\n{u.Jsonify()}");
                }
            }

            Func<Card, bool> cardPred = (card => card.EntityRelationshipGuid == u.ObjectGuid);
            bool checkForUpdate = true;
            // Update all cards where the Card and User are related.
            if (cards.Any(cardPred) && checkForUpdate)
            {
                foreach (Card existingCard in cards.Where(cardPred))
                {
                    Console.WriteLine($"Card exists. Updating {existingCard} (Object ID: {existingCard.ObjectId}).");

                    existingCard.ActivationDate = c.ActivationDate;
                    existingCard.ExpirationDate = c.ExpirationDate;
                    existingCard.DisplayName = c.DisplayName;
                    c = existingCard;

                    if (cnn.Update(existingCard))
                    {
                        Console.WriteLine($"Card successfully updated. Object ID: {existingCard.ObjectId}");
                    }
                    else
                    {
                        Console.WriteLine($"Card update unsuccessful.\nRequest Text:\n{cnn.RequestText}\nResponse Text:\n{cnn.ResponseText}\n{c.Jsonify()}");
                    }
                }
            }
            else
            {
                Console.WriteLine($"Card does not exist. Object ID. Inserting {c}");
                cnn.Insert(c);
                if (c.ObjectId != null)
                {
                    Console.WriteLine($"Card successfully inserted. Object ID: {c.ObjectId}");
                }
                else
                {
                    Console.WriteLine($"Card insert unsuccessful.\nRequest Text:\n{cnn.RequestText}\nResponse Text:\n{cnn.ResponseText}\n{c.Jsonify()}");
                }
            }

            Console.WriteLine($"Cleaning up Cards from this program...");
            var deletedCards = cnn.Delete<Card>(
                new Func<Card, bool> (theCard => theCard.EntityRelationshipGuid == u.ObjectGuid) );

            if (deletedCards.Count > 0)
            {
                Console.WriteLine($"Card cleanup successful!");
            }
            else
            {
                Console.WriteLine($"Card cleanup unsuccessful!\n{cnn.RequestText}\n{cnn.ResponseText}");
            }

            Console.WriteLine($"Cleaning up Users from this program...");
            var deletedUsers = cnn.Delete<User>(
                new Func<User, bool> (theUser => theUser.FirstName == u.FirstName && theUser.LastName == u.LastName) );

            if(deletedUsers.Count > 0)
            {
                Console.WriteLine($"User cleanup successful!");
            }
            else
            {
                Console.WriteLine($"User cleanup unsuccessful!\n{cnn.RequestText}\n{cnn.ResponseText}");
            }

        }
    }
}
